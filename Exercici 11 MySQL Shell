#
# MySQL 8 Shell
#
# This example shows a simple X DevAPI script to work with relational data
#
from mysqlsh import mysqlx # needed in case you run the code outside of the shell
# SQL CREATE TABLE statement
CREATE_TBL = """
CREATE TABLE Caixer (
    'Id_caixer' int PRIMARY KEY,
    'DNI_caixer' varchar(25),
    'Nom_caixer' varchar(25),
    'Cognom_caixer' varchar(25),
    'Ntelf_caixer' int
)ENGINE=InnoDB DEFAULT CHARSET=latin1 
"""
# column list, user data structure
COLUMNS = ['Id_caixer', 'DNI_caixer', 'Nom_caixer', 'Cognom_caixer', 'Ntelf_caixer']
user_info = {
  'host': 'localhost',
  'port': 33060,
  'user': 'root',
  'password': 'root',
}
print("Listing 4-6 Example - Python X DevAPI Demo with Relational Data.")
# Get a session (connection)
my_session = mysqlx.get_session(user_info)
# Precautionary drop schema
my_session.drop_schema('Caixer')
# Create the database (schema)
my_db = my_session.create_schema('Caixer')
# Execute the SQL statement to create the table
sql_res = my_session.sql(CREATE_TBL).execute()
# Get the table object                
my_tbl = my_db.get_table('Caixer')
# Insert some rows (data)
my_tbl.insert(COLUMNS).values(123, "12366677-Z", "Roser", "Avellan", 934524565).execute()
my_tbl.insert(COLUMNS).values(54, "14366677-W", "Fran", "Català", 932457825).execute()
my_tbl.insert(COLUMNS).values(34, "11363547-X", "Pau", "Barber", 938742595).execute()
my_tbl.insert(COLUMNS).values(23, "12366677-E", "Lluc", "Avellan", 932541525).execute()
my_tbl.insert(COLUMNS).values(12, "25366677-S", "David", "Campos", 934152545).execute()
# Execute a simple select (SELECT ∗ FROM)
print("\nShowing results after inserting all rows.")
my_res = my_tbl.select(COLUMNS).execute()
# Display the results . Demonstrates how to work with results
# Print the column names followed by the rows
column_names = my_res.get_column_names()
column_count = my_res.get_column_count()
for i in range(0,column_count):
    if i < column_count - 1:
        print "{0}, ".format(column_names[i]),
    else:
        print "{0}".format(column_names[i]),
print
for row in my_res.fetch_all():
    for i in range(0,column_count):
        if i < column_count - 1:
            print "{0}, ".format(row[i]),
        else:
            print "{0}".format(row[i]),
    print
# Update a row
# my_tbl.update().set('sensor_units', 'inches').where('sensor_value LIKE 1.52').execute()
# print("\nShowing results after updating row with sensor_value LIKE 1.52.")
# Execute a simple select (SELECT ∗ FROM)
my_res = my_tbl.select(COLUMNS).execute()
# Display the results
for row in my_res.fetch_all():
    print row
# Delete some rows
my_tbl.delete().where('Id_caixer > 100').execute()
# Execute a simple select (SELECT ∗ FROM)
print("\nMostrar els registres esborrats amb la anterior comanda que tenia el filtre següent: Id_caixer > 100.")
my_res = my_tbl.select(COLUMNS).execute()
# Display the results
for row in my_res.fetch_all():
    print row
# Delete the database (schema)
my_session.drop_schema('Caixer')
